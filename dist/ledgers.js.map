{"version":3,"sources":["webpack://__oh$__/webpack/universalModuleDefinition","webpack://__oh$__/webpack/bootstrap","webpack://__oh$__/external \"Web3\"","webpack://__oh$__/./src/ledgers.js","webpack://__oh$__/(webpack)/buildin/global.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","oh$","self","_typeof","global","this","_EventTarget","_temp","_getPrototypeOf2","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_getPrototypeOf","apply","concat","_defineProperty","_assertThisInitialized","getImparterTags","canSetCredentials","canGenerateCredentials","canChangeNetwork","generateCredentials","setCredentials","setNetwork","getOverhideRemunerationAPIUri","getCredentials","getNetwork","getTally","getTransactions","isOnLedger","sign","createTransaction","_inherits","_wrapNativeSuper","EventTarget","WALLET_CHECK_INTERVAL_MS","ETH_WEB3_IMPARTER_TAG","OHLEDGER_IMPARTER_TAG","OHLEDGER_WEB3_IMPARTER_TAG","imparterTags","data","walletAddress","network","remuneration_uri","main","rinkeby","oh_ledger_transact_fn","prod","test","address","secret","eth_accounts","web3__WEBPACK_IMPORTED_MODULE_0___default","a","eth","accounts","fire","which","params","event","document","param","imparterTag","_x","_x2","_setCredentials","_asyncToGenerator","regeneratorRuntime","mark","_callee4","credentials","wrap","_context4","prev","next","t0","Error","t1","abrupt","stop","_x3","_x4","_generateCredentials","_callee5","options","res","_context5","_x5","_x6","_setNetwork","_callee6","details","_context6","currency","uri","_x7","_x8","_x9","_getTally","_callee7","recipient","date","_context7","getTxs","sent","tally","_x10","_x11","_x12","_getTransactions","_callee8","_context8","transactions","_x13","_x14","_x15","_x16","_getTxs","_callee9","tallyOnly","to","from","since","_context9","Date","fetch","then","json","e","String","_x17","_isOnLedger","_callee10","message","signature","_context10","method","headers","Content-Type","body","JSON","stringify","btoa","result","_x18","_x19","_sign","_callee11","_context11","_x20","_x21","_x22","_x23","_createTransaction","_callee12","amount","eventPromise","_context12","toLocaleString","showOhLedgerGratisIframeUri","setupNewPromise","Promise","resolve","reject","web3","confirmationNumber","receipt","error","popup","style","attach","loadJS","setTimeout","createPopup","ethereum","_callee2","_context2","enable","detectWalletCb","setInterval","_callee","_context","_ref3","_callee3","currentAccounts","currentAddress","currentNetwork","_imparterTagIndex","_context3","getAccounts","getNetworkType","findIndex","v","imparterTagIndex","isPresent","detectWeb3Wallet","console","rs","rj","makePopupHidden","isError","hideAllPopupContents","_x24","_x25","_x26","_x27","_showOhLedgerGratisIframeUri","_callee13","frame","_context13","url","implementationCode","location","scriptTag","detail","__webpack_exports__","g","Function"],"mappings":"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","file":"ledgers.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"Web3\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"__oh$__\", [\"Web3\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"__oh$__\"] = factory(require(\"Web3\"));\n\telse\n\t\troot[\"__oh$__\"] = factory(root[\"Web3\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","import Web3 from 'web3';\r\n\r\n//     ledgers.js \r\n//     https://ohledger.com\r\n//     (c) 2019 Overhide LLC, Wyoming, USA\r\n//     ledgers.js may be freely distributed under the MIT license.\r\n\r\n/**\r\n * @namespace oh$\r\n * @description \r\n * \r\n * #### REFERENCES\r\n * \r\n * Library code: https://github.com/overhide/ledgers.js/blob/master/ledgers.js.\r\n *\r\n * Repository for this library is https://github.com/overhide/ledgers.js.\r\n * \r\n * The repository contains a demo app of this library working in conjunction with the *overhide* Ethereum remuneration\r\n * provider (Rinkeby testnet -- https://rinkeby.ethereum.overhide.io) and the *overhide-ledger* (test environment -- https://test.ledger.overhide.io)\r\n * \r\n * #### ABOUT\r\n * \r\n * JavaScript library to be used in-browser and interrogate *overhide* remuneration providers as to validity\r\n * of ledger credentials and transactions involving these credentials.\r\n * \r\n * The goal of the library and the *overhide* remuneration providers is to ease using of all types of ledgers for\r\n * authentication (I am who I say) and authorization (paid access tiers).\r\n * \r\n * The library leverages injected currency wallets where it can, and exposes functions to work with *loose* currencies \r\n * (without wallets) where it cannot.\r\n * \r\n * The library exports the `oh$` object for use as a module when bundling.\r\n * \r\n * ```\r\n * import oh$ from \"ledgers.js\";\r\n * oh$.addEventListener('onWalletChange', (e) => {...});\r\n * ```\r\n * \r\n * Once bundled with its dependencies--the library can be loaded straight into your HTML and accessed by its `oh$` \r\n * property from the browser's `window` object:\r\n * \r\n * ```\r\n * <script src=\"./dist/ledgers.js\"></script>\r\n * <script>\r\n *   oh$.addEventListener('onWalletChange', (e) => {...});\r\n * </script>\r\n * ```\r\n * \r\n * #### IMPARTERS\r\n * \r\n * The library works with a concept of *imprater* tags.  Wallets impart credentials, signatures, and transactions.  For\r\n * *loose change*--where no wallet exists--the library can be interrogated as to which entities should be set by the \r\n * user (can* functions); causing the entities to be imparted back to the user in a common code flow.  \r\n * \r\n * The imparter tags are a simple naming convention.  For example if multiple Ethereum wallet APIs were imparting data \r\n * they  would be individually tagged with a prefix \"eth\" and a dashed suffix.  No suffix indicates a *loose change*\r\n * imparter:\r\n * \r\n * - eth-web3\r\n * - eth-?\r\n * \r\n * Similarly for *overhide-ledger*, the prefix is \"ohledger\", the suffix won't be attached on the *loose change* version \r\n * and will be suffixed on the *web3* walleted version:\r\n * \r\n * - ohledger\r\n * - ohledger-web3\r\n * \r\n * The following sections cover special notes on each imparter.  The library adheres to these notes.\r\n * \r\n * ##### eth-web3\r\n * \r\n * Ethereum addresses are 20 bytes: 42 character 'hex' strings prefixed with '0x'.\r\n * \r\n * Ethereum secret keys for signing addresses are 32 bytes: 66 character 'hex' strings prefixed with '0x'.\r\n * \r\n * Ethereum networks names are:\r\n * \r\n * * main\r\n * * kovan\r\n * * rinkeyby\r\n * * ropsten\r\n * \r\n * The denomination for amounts is the Wei\r\n * \r\n * ##### ohledger, ohledger-web3\r\n * \r\n * Addresses and secret keys use Ethereum format.\r\n * \r\n * Addresses are 20 bytes: 42 character 'hex' strings prefixed with '0x'.\r\n * \r\n * Secret keys for signing addresses are 32 bytes: 66 character 'hex' strings prefixed with '0x'.\r\n * \r\n * Network tuples consist of a 'currency' as a three letter ISO fiat currency code and a 'mode'.  The supported\r\n * 'currency' names are:\r\n * \r\n * * 'USD' (cents)\r\n * \r\n * The denomination in brackets is not part of the name and is the denomination for amounts.\r\n * \r\n * Note: at this point only USD are supported.  If there is a need, and *overhide-ledger* instances in currencies\r\n * other than USD come online, we'll revisit this.\r\n *\r\n * An 'ohledger' mode is on of 'prod' or 'test'\r\n * \r\n */\r\nconst oh$ = (function() {\r\n\r\n  var root = typeof self == 'object' && self.self === self && self ||\r\n    typeof global == 'object' && global.global === global && global ||\r\n    this ||\r\n    {};\r\n\r\n  root.oh$ = new class extends EventTarget {\r\n  /**\r\n   * @event onWalletChange\r\n   * @param {Object} event object - the event object passed in will have additional attributes\r\n   *\r\n   *  > The new event object will conform to the following:\r\n   *  >\r\n   *  > | imparter tag | event object attributes |\r\n   *  > | --- | --- |\r\n   *  > | * | `{imparterTag:..,isPresent:..}` |\r\n   *  >\r\n   *  > *imparterTag* - causing the event\r\n   *  >\r\n   *  > *isPresent* - if wallet is present for imparter\r\n   *\r\n   * @description\r\n   *   Event called when wallets' state changes.\r\n   * \r\n   *   In user code:\r\n   * \r\n   *   ```\r\n   *   oh$.addEventListener('onWalletChange', (e) => console.log(`wallet for ${e.imparterTag} is available:${e.isPresent}`));\r\n   *   ```\r\n   */\r\n\r\n  /**\r\n   * @event onWalletPopup\r\n   * @param {Object} event object - the event object passed in will have additional attributes\r\n   *\r\n   *  > The new event object will conform to the following:\r\n   *  >\r\n   *  > | imparter tag | event object attributes |\r\n   *  > | --- | --- |\r\n   *  > | * | `{imparterTag:..}` |\r\n   *  >\r\n   *  > *imparterTag* - causing the pop-up\r\n   *\r\n   * @description\r\n   *   Event called when wallet is expected to popup.  Useful in case user wants to react to popup in UI.\r\n   * \r\n   *   In user code:\r\n   * \r\n   *   ```\r\n   *   oh$.addEventListener('onWalletPopup', (e) => console.log(`wallet for ${e.imparterTag} popped`));\r\n   *   ```\r\n   */\r\n\r\n  /**\r\n   * @event onCredentialsUpdate\r\n   * @description\r\n   *   Event called when an credentials change for one of the tracked imparters.\r\n   * \r\n   *   Only called when credentials are valid as per imparter: ready to be used for signing, transacting.\r\n   *\r\n   *   In user code:\r\n   *\r\n   *   ```\r\n   *   oh$.addEventListener('onCredentialsUpdate', (e) => {\r\n   *     if (e.imparterTag === 'eth-web3') console.log(`new address for ${e.imparterTag} is:${e.address}`);\r\n   *     return;\r\n   *   });\r\n   *   ```\r\n   * @param {Object} event object - the event object passed in will have additional attributes\r\n   * \r\n   *  > The new event object will conform to the following:\r\n   *  >\r\n   *  > | imparter tag | event object attributes |\r\n   *  > | --- | --- |\r\n   *  > | eth-web3 | `{imparterTag:..,address:..}` |\r\n   *  > | ohledger | `{imparterTag:..,address:..,secret:..}` |\r\n   *  > | ohledger-web3 | `{imparterTag:..,address:..}` |\r\n   *  >\r\n   *  > *imparterTag* - causing the event\r\n   *  >\r\n   *  > *address* - ledger public address of credential set for imparter\r\n   *  >\r\n   *  > *secret* - ledger PKI private secret for credential set for imparter\r\n   *\r\n   */\r\n\r\n  /**\r\n   * @event onNetworkChange\r\n   * @description\r\n   *   Event called when the network changes for a particular imparter tag.\r\n   * \r\n   *   For example for \"eth0\" the network could changed from \"main\" to \"rinkeby\".  \r\n   * \r\n   *   In user code:\r\n   *\r\n   *   ```\r\n   *   oh$.addEventListener('onNetworkChange', (e) => {\r\n   *     if (e.imparterTag === 'eth-web3') console.log(`new network selected for ${e.imparterTag} is:${e.name}`);\r\n   *     if (e.imparterTag === /ohledger/.test(e.imparterTag)) console.log(`working in currency: ${e.currency}`);\r\n   *     return;\r\n   *   });\r\n   *   ```\r\n   * @param {Object} event object - the event object passed in will have additional attributes\r\n   *\r\n   *  > The new credentials object will conform to the following:\r\n   *  >\r\n   *  > | imparter tag | event object attributes |\r\n   *  > | --- | --- |\r\n   *  > | eth-web3 | `{imparterTag:..,name:('main'|'rinkeby'|'kovan').., uri:..}` |\r\n   *  > | ohledger | `{imparterTag:..,currency:'USD',mode:('prod'|'test'), uri:..}` |\r\n   *  > | ohledger-web3 | `{imparterTag:..,currency:'USD',mode:('prod'|'test'), uri:..}` |\r\n   *  >\r\n   *  > *imparterTag* - causing the event\r\n   *  >\r\n   *  > *name* - of network\r\n   *  >\r\n   *  > *currency* - represented by network\r\n   *  >\r\n   *  > *mode* - production or test network\r\n   *  >\r\n   *  > *uri* - remuneration API URI for network\r\n   *\r\n   */\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function getImparterTags\r\n     * @description\r\n     *   Retrieves all imparter tags injected by wallets and statically available from the library.\r\n     * @returns {Array} of strings: the imparter tags available\r\n     */\r\n    getImparterTags = getImparterTags;\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function canSetCredentials\r\n     * @description\r\n     *   Interrogate whether the imparter tag can have credentials set by the user: or does the wallet control it\r\n     *   exclusively.\r\n     * \r\n     *   Only the following imparter(s) will return 'true':\r\n     * \r\n     *   - ohledger\r\n     * \r\n     * @param {string} imparterTag\r\n     * @returns {boolean} 'true' if particular imparter tag can have credentials set.\r\n     */\r\n    canSetCredentials = canSetCredentials;\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function canGenerateCredentials\r\n     * @description\r\n     *   Interrogate whether the imparter tag can have credentials generated by the user: or does the wallet control it\r\n     *   exclusively.\r\n     *\r\n     *   Only the following imparter(s) will return 'true':\r\n     *\r\n     *   - ohledger\r\n     *\r\n     * @param {string} imparterTag\r\n     * @returns {boolean} 'true' if particular imparter tag can have credentials generated.\r\n     */\r\n    canGenerateCredentials = canGenerateCredentials;\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function canChangeNetwork\r\n     * @description\r\n     *   Interrogate whether the imparter tag can have network changed by the user via oh$: or does the wallet control it\r\n     *   exclusively.\r\n     *\r\n     *   Only the following imparter(s) will return 'true':\r\n     *\r\n     *   - ohledger\r\n     *   - ohledger-web3\r\n     *\r\n     * @param {string} imparterTag\r\n     * @returns {boolean} 'true' if particular imparter tag can have networks changed via oh$.\r\n     */\r\n    canChangeNetwork = canChangeNetwork;\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function generateCredentials\r\n     * @description\r\n     *   For imparters that can have credentials generated, generates them.  \r\n     * \r\n     *   Fires [onCredentialsUpdate](#eventoncredentialsupdate) event against `oh$`\r\n     * @param {string} imparterTag\r\n     * @param {Object} options - imparter specific generation options, if any.\r\n     * \r\n     *  > The options objects are as follows:\r\n     *  >\r\n     *  > | imparter tag | credentials object |\r\n     *  > | --- | --- |\r\n     *  > | eth-web3 | N/A |\r\n     *  > | ohledger | null |\r\n     *  > | ohledger-web3 | N/A |\r\n     *\r\n     * @returns {Promise} representing a 'true' if success else 'false'; also fires [onCredentialsUpdate](#eventoncredentialsupdate) event against `oh$`\r\n\r\n     */\r\n    generateCredentials = generateCredentials;\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function setCredentials\r\n     * @description\r\n     *   For imparters that can have credentials set, sets them.  \r\n     * \r\n     *   Fires [onCredentialsUpdate](#eventoncredentialsupdate) event against `oh$`.\r\n     * @param {string} imparterTag\r\n     * @param {Object} credentials - credentials object of imparter specific parameters to set\r\n     * \r\n     *  > The credentials objects are as follows:\r\n     *  >\r\n     *  > | imparter tag | credentials object | comments |\r\n     *  > | --- | --- | --- |\r\n     *  > | eth-web3 | N/A | |\r\n     *  > | ohledger | `{address:..,secret:..}` | `address` is optional, if not set will be extracted from `secret` |\r\n     *  > | ohledger-web3 | N/A | |\r\n     *\r\n     * @returns {Promise} representing a 'true' if success else 'false'; also fires [onCredentialsUpdate](#eventoncredentialsupdate) event against `oh$`\r\n     */\r\n    setCredentials = setCredentials;\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function setNetwork\r\n     * @description\r\n     *   For imparters that can have networks changed via oh$, changes it.  \r\n     * \r\n     *   Fires [onNetworkChange](#eventonnetworkchange) event against `oh$`.\r\n     * @param {string} imparterTag\r\n     * @param {Object} details - network details object of imparter specific parameters to set.\r\n     * \r\n     *  > The network details objects are as follows:\r\n     *  >\r\n     *  > | imparter tag | network details object |\r\n     *  > | --- | --- |\r\n     *  > | eth-web3 | N/A |\r\n     *  > | ohledger | `{currency:'USD', mode:'prod'|'test'}` |\r\n     *  > | ohledger-web3 | `{currency:'USD', mode:'prod'|'test'}` |\r\n     *\r\n     * @returns {Promise} representing a 'true' if success else 'false'; also fires [onNetworkChange](#eventonnetworkchange) event against `oh$`\r\n     */\r\n    setNetwork = setNetwork;\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function getOverhideRemunerationAPIUri\r\n     * @description\r\n     *   Based on current network set returns the *overhide* remuneration API URI configured in the library.\r\n     * @param {string} imparterTag\r\n     * @returns {string} the URI.\r\n     */\r\n    getOverhideRemunerationAPIUri = getOverhideRemunerationAPIUri;\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function getCredentials\r\n     * @description\r\n     *   Retrieves current credentials for an imparterTag.\r\n     * @param {string} imparterTag\r\n     * @returns {Object} details - an object describing current credentials, imparterTag dependant:\r\n     * \r\n     *  > | imparter tag | credentials object |\r\n     *  > | --- | --- |\r\n     *  > | eth-web3 | `{address:..}` |\r\n     *  > | ohledger | `{address:..,secret:..}` |\r\n     *  > | ohledger-web3 | `{address:..}` |\r\n     */\r\n    getCredentials = getCredentials;\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function getNetwork\r\n     * @description\r\n     *   Retrieves current network for an imparterTag.\r\n     * @param {string} imparterTag\r\n     * @returns {Object} details - an object describing current network, imparterTag dependant:\r\n     * \r\n     *  > | imparter tag | network details object |\r\n     *  > | --- | --- |\r\n     *  > | eth-web3 | `{name:('main'|'rinkeby'|'kovan').., uri:..}` |\r\n     *  > | ohledger | `{currency:'USD',mode:('prod'|'test'), uri:..}` |\r\n     *  > | ohledger-web3 | `{currency:'USD',mode:('prod'|'test'), uri:..}` |\r\n     */\r\n    getNetwork = getNetwork;\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function getTally\r\n     * @description\r\n     *   Retrieve a tally of all transactions on the imparter's ledger--perhaps within a date range.\r\n     * @param {string} imparterTag\r\n     * @param {Object} recepient - imparter specific object describing recipient of transactions to tally for.\r\n     *\r\n     *  > Recipient objects are as per:\r\n     *  >\r\n     *  > | imparter tag | recipient object |\r\n     *  > | --- | --- |\r\n     *  > | eth-web3 | `{address:..}` |\r\n     *  > | ohledger | `{address:..}` |\r\n     *  > | ohledger-web3 | `{address:..}` |\r\n     *\r\n     * @param {Date} since - date to start tally since: date of oldest transaction to include.  No restriction if 'null'.\r\n     * @returns {Promise} with the tally value in imparter specific currency\r\n     */\r\n    getTally = getTally;\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function getTransactions\r\n     * @description\r\n     *   Retrieve transactions on the imparter's ledger, perhaps within a date range, from credentials set against \r\n     *   imparter to a recipient\r\n     * @param {string} imparterTag\r\n     * @param {Date} since - date to start tally since: date of oldest transaction to include.  No restriction if 'null'.\r\n     * @param {Object} recepient - imparter specific object describing recipient of transactions to tally for.\r\n     *\r\n     *  > Recipient objects are as per:\r\n     *  >\r\n     *  > | imparter tag | recipient object |\r\n     *  > | --- | --- |\r\n     *  > | eth-web3 | `{address:..}` |\r\n     *  > | ohledger | `{address:..}` |\r\n     *  > | ohledger-web3 | `{address:..}` |\r\n     *\r\n     * @returns {Promise} with the transactions: `[{\"transaction-value\":..,\"transaction-date\":..},..]`\r\n     */\r\n    getTransactions = getTransactions;\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function isOnLedger\r\n     * @description\r\n     *   Determine if current credentials have some transaction on the imparter's ledger: transaction can be to anyone.\r\n     * \r\n     *   Intent is to validate beyond just a valid address.  To validate the address has been used.\r\n     * \r\n     *   May fire [onWalletPopup](#eventonwalletpopup) event against `oh$`.\r\n     * @param {string} imparterTag\r\n     * @returns {Promise} with 'true' or 'false'; may fire [onWalletPopup](#eventonwalletpopup) event against `oh$`\r\n     */\r\n    isOnLedger = isOnLedger;\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function sign\r\n     * @description\r\n     *   Sign using the provided message using the credentials set against the specific imparter.\r\n     * \r\n     *   Note: wallet might pop up a dialog upon this call, consider that in your UX flow.\r\n     * \r\n     *   May fire [onWalletPopup](#eventonwalletpopup) event against `oh$`.\r\n     * @param {string} imparterTag\r\n     * @param {string} message - to sign\r\n     * @returns {Promise} with the signature; may fire [onWalletPopup](#eventonwalletpopup) event against `oh$`\r\n     */\r\n    sign = sign;\r\n\r\n    /**\r\n     * @namespace oh$\r\n     * @function createTransaction\r\n     * @description\r\n     *   Create a transaction on the imparter's ledger.\r\n     * \r\n     *   May fire [onWalletPopup](#eventonwalletpopup) event against `oh$`; wallet might pop up a dialog upon this call, consider that in your UX flow.\r\n     * @param {string} imparterTag\r\n     * @param {number} amount\r\n     * @param {string} to - address of recipient\r\n     * \r\n     *  > $0 (*amount*) transactions against *ohledger* or *ohledger-web* *imparters* use the current credential \r\n     *  > as the *to* address, not the specified *to* address.\r\n     *  \r\n     * @param {Object} options - other options required for the specific imparter.\r\n     * \r\n     *  > The options objects are as follows:\r\n     *  > \r\n     *  > | imparter tag | credentials object |\r\n     *  > | --- | --- |\r\n     *  > | eth-web3 | null |\r\n     *  > | ohledger | {message:.., signature:..} |\r\n     *  > | ohledger-web3 | {message:.., signature:..} |\r\n     *  > \r\n     *  > If *message* and *signature* are provided they are used instead of oh$ asking for wallet to resign message.\r\n     *\r\n     * @returns {Promise} of a 'true' for success or an Error; may fire [onWalletPopup](#eventonwalletpopup) event against `oh$`\r\n     */\r\n    createTransaction = createTransaction;\r\n  }();\r\n\r\n  const WALLET_CHECK_INTERVAL_MS = 500;\r\n\r\n  const ETH_WEB3_IMPARTER_TAG = 'eth-web3';\r\n  const OHLEDGER_IMPARTER_TAG = 'ohledger'\r\n  const OHLEDGER_WEB3_IMPARTER_TAG = 'ohledger-web3'\r\n\r\n  var imparterTags = [OHLEDGER_IMPARTER_TAG];\r\n\r\n  var data = {\r\n    ETH_WEB3_IMPARTER_TAG: {\r\n      walletAddress: null,\r\n      network: null,\r\n      remuneration_uri: {\r\n        'main':'https://ethereum.overhide.io',\r\n        'rinkeby':'https://rinkeby.ethereum.overhide.io'\r\n      }\r\n    },\r\n    OHLEDGER_IMPARTER_TAG: {\r\n      oh_ledger_transact_fn: {\r\n        'prod': null,\r\n        'test': null\r\n      },\r\n      address: null,\r\n      secret: null,\r\n      mode: 'test',\r\n      remuneration_uri: {\r\n        'prod': 'https://ohledger.com/v1',\r\n        'test': 'https://test.ohledger.com/v1'\r\n      }\r\n    },\r\n    OHLEDGER_WEB3_IMPARTER_TAG: {\r\n      oh_ledger_transact_fn: {\r\n        'prod': null,\r\n        'test': null\r\n      },\r\n      walletAddress: null,\r\n      mode: 'test',\r\n      remuneration_uri: {\r\n        'prod': 'https://ohledger.com/v1',\r\n        'test': 'https://test.ohledger.com/v1'\r\n      }\r\n    }\r\n  }\r\n\r\n  var eth_accounts = (new Web3('http://localhost:8545')).eth.accounts;\r\n\r\n  createPopup();\r\n  detectWeb3Wallet();\r\n\r\n  /**\r\n   * Function to fire events.\r\n   * \r\n   * @param {string} which - event name to fire\r\n   * @param {Object} params - to copy to event\r\n   */\r\n  function fire(which, params) {\r\n    let event = document.createEvent(\"Event\");\r\n    event.initEvent(which, true, true);\r\n    for (var param in params) {\r\n      event[param] = params[param];\r\n    }\r\n    oh$.dispatchEvent(event);\r\n  }\r\n\r\n  /**\r\n   * Setup window.web3 to be the wallet's if available or offline if not (just for signing).\r\n   * \r\n   * Sets up a timer to check for wallet being logged in and address changes.\r\n   * \r\n   * @ignore\r\n   */\r\n  function detectWeb3Wallet() {    \r\n    if (!window.ethereum) return;\r\n \r\n    // Modern dapp browsers...\r\n    (async () => {\r\n      try {\r\n        await window.ethereum.enable();\r\n        window.web3 = new Web3(window.ethereum);\r\n      } catch (e) {/*noop*/ }\r\n\r\n      await detectWalletCb();\r\n\r\n      setInterval(async function () {\r\n        await detectWalletCb();\r\n      }, WALLET_CHECK_INTERVAL_MS);\r\n    })();\r\n\r\n    var detectWalletCb = async () => {\r\n      try {\r\n        var currentAccounts = await window.web3.eth.getAccounts();\r\n        var currentAddress = (currentAccounts && currentAccounts.length > 0) ? currentAccounts[0] : null;\r\n        var currentNetwork = (await window.web3.eth.net.getNetworkType());\r\n      } catch (e) {/*noop*/}\r\n      if (currentNetwork !== data.ETH_WEB3_IMPARTER_TAG.network) {\r\n        data.ETH_WEB3_IMPARTER_TAG.network = currentNetwork;\r\n        fire('onNetworkChange',{imparterTag: ETH_WEB3_IMPARTER_TAG, name:currentNetwork, uri: data.ETH_WEB3_IMPARTER_TAG.remuneration_uri[currentNetwork]});\r\n      }\r\n      if (currentAddress !== data.ETH_WEB3_IMPARTER_TAG.walletAddress) {\r\n        if (currentAddress) { /* add imparters */\r\n          let imparterTagIndex = imparterTags.findIndex(v => v === ETH_WEB3_IMPARTER_TAG);\r\n          if (imparterTagIndex == -1) imparterTags.push(ETH_WEB3_IMPARTER_TAG);\r\n          imparterTagIndex = imparterTags.findIndex(v => v === OHLEDGER_WEB3_IMPARTER_TAG);\r\n          if (imparterTagIndex == -1) imparterTags.push(OHLEDGER_WEB3_IMPARTER_TAG);\r\n        } else { /* remove imparters */\r\n          let imparterTagIndex = imparterTags.findIndex(v => v === ETH_WEB3_IMPARTER_TAG);\r\n          if (imparterTagIndex > -1) imparterTags.splice(imparterTagIndex, 1);\r\n          imparterTagIndex = imparterTags.findIndex(v => v === OHLEDGER_WEB3_IMPARTER_TAG);\r\n          if (imparterTagIndex > -1) imparterTags.splice(imparterTagIndex, 1);\r\n        } \r\n        data.ETH_WEB3_IMPARTER_TAG.walletAddress = currentAddress;\r\n        data.OHLEDGER_WEB3_IMPARTER_TAG.walletAddress = currentAddress;\r\n        fire('onWalletChange', { imparterTag: ETH_WEB3_IMPARTER_TAG, isPresent: !!currentAddress });\r\n        fire('onWalletChange', { imparterTag: OHLEDGER_WEB3_IMPARTER_TAG, isPresent: !!currentAddress });\r\n        if (currentAddress) {\r\n          fire('onCredentialsUpdate', { imparterTag: ETH_WEB3_IMPARTER_TAG, address: currentAddress });\r\n          fire('onCredentialsUpdate', { imparterTag: OHLEDGER_WEB3_IMPARTER_TAG, address: currentAddress });\r\n        }\r\n      }\r\n    }\r\n  } \r\n\r\n  function getImparterTags() {\r\n    return imparterTags;\r\n  }\r\n\r\n  function canSetCredentials(imparterTag) {\r\n    return imparterTag === OHLEDGER_IMPARTER_TAG;\r\n  }\r\n\r\n  function canGenerateCredentials(imparterTag) {\r\n    return imparterTag === OHLEDGER_IMPARTER_TAG;\r\n  }\r\n\r\n  function canChangeNetwork(imparterTag) {\r\n    switch (imparterTag) {\r\n      case OHLEDGER_IMPARTER_TAG:\r\n      case OHLEDGER_WEB3_IMPARTER_TAG:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  async function setCredentials(imparterTag, credentials) {\r\n    switch (imparterTag) {\r\n      case OHLEDGER_IMPARTER_TAG:\r\n        if (!('secret' in credentials)) throw new Error(\"'secret' must be passed in\");\r\n        if ('address' in credentials && credentials.address) {\r\n          data.OHLEDGER_IMPARTER_TAG.address = credentials.address.toLowerCase();\r\n        } else {\r\n          data.OHLEDGER_IMPARTER_TAG.address = eth_accounts.privateKeyToAccount(credentials.secret).address.toLowerCase();\r\n        }\r\n        data.OHLEDGER_IMPARTER_TAG.secret = credentials.secret;\r\n        try {\r\n          if (!(eth_accounts.recover(eth_accounts.sign('test message', data.OHLEDGER_IMPARTER_TAG.secret)).toLowerCase() == data.OHLEDGER_IMPARTER_TAG.address)) {\r\n            throw new Error(\"'secret' not valid for 'address\");\r\n          }\r\n        } catch (err) {\r\n          throw new Error(\"'secret' not valid for 'address\");\r\n        }        \r\n        fire('onCredentialsUpdate', { imparterTag: OHLEDGER_IMPARTER_TAG, address: data.OHLEDGER_IMPARTER_TAG.address, secret: data.OHLEDGER_IMPARTER_TAG.secret});\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  function getCredentials(imparterTag) {\r\n    switch (imparterTag) {\r\n      case OHLEDGER_IMPARTER_TAG:        \r\n        return {\"address\":data.OHLEDGER_IMPARTER_TAG.address, \"secret\":data.OHLEDGER_IMPARTER_TAG.secret};\r\n      case OHLEDGER_WEB3_IMPARTER_TAG:\r\n        return {\"address\":data.OHLEDGER_WEB3_IMPARTER_TAG.walletAddress};\r\n      case ETH_WEB3_IMPARTER_TAG:\r\n        return {\"address\":data.ETH_WEB3_IMPARTER_TAG.walletAddress};\r\n      default:\r\n        throw new Error(\"invalid imparterTag\");\r\n    }\r\n  }\r\n\r\n  async function generateCredentials(imparterTag, options) {\r\n    switch (imparterTag) {\r\n      case OHLEDGER_IMPARTER_TAG:\r\n        let res = eth_accounts.create();\r\n        data.OHLEDGER_IMPARTER_TAG.address = res.address.toLowerCase();\r\n        data.OHLEDGER_IMPARTER_TAG.secret = res.privateKey;\r\n        fire('onCredentialsUpdate', { imparterTag: OHLEDGER_IMPARTER_TAG, address: data.OHLEDGER_IMPARTER_TAG.address, secret: data.OHLEDGER_IMPARTER_TAG.secret});\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  async function setNetwork(imparterTag, details) {\r\n    if (ETH_WEB3_IMPARTER_TAG == imparterTag) return false;\r\n    if (!('currency' in details)) throw new Error(\"'currency' must be passed in\");\r\n    if (!('mode' in details)) throw new Error(\"'mode' must be passed in\");\r\n    details.currency = details.currency.toUpperCase();\r\n    details.mode = details.mode.toLowerCase();\r\n    if (details.currency !== 'USD') throw new Error(\"'currency' must be 'USD'\");\r\n    if (details.mode !== 'prod' && details.mode !== 'test') throw new Error(\"'mode' must be 'prod' or 'test'\");\r\n    switch (imparterTag) {\r\n      case OHLEDGER_IMPARTER_TAG:\r\n        data.OHLEDGER_IMPARTER_TAG.mode = details.mode;\r\n        fire('onNetworkChange', { imparterTag: OHLEDGER_IMPARTER_TAG, currency: 'USD', mode: details.mode, uri: data.OHLEDGER_IMPARTER_TAG.remuneration_uri[details.mode]});\r\n        return true;\r\n      case OHLEDGER_WEB3_IMPARTER_TAG:\r\n        data.OHLEDGER_WEB3_IMPARTER_TAG.mode = details.mode;\r\n        fire('onNetworkChange', { imparterTag: OHLEDGER_WEB3_IMPARTER_TAG, currency: 'USD', mode: details.mode, uri: data.OHLEDGER_WEB3_IMPARTER_TAG.remuneration_uri[details.mode] });\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  function getNetwork(imparterTag) {\r\n    switch (imparterTag) {\r\n      case OHLEDGER_IMPARTER_TAG:        \r\n        return { \"currency\": \"USD\", \"mode\": data.OHLEDGER_WEB3_IMPARTER_TAG.mode, \"uri\": data.OHLEDGER_WEB3_IMPARTER_TAG.remuneration_uri[data.OHLEDGER_WEB3_IMPARTER_TAG.mode]};\r\n      case OHLEDGER_WEB3_IMPARTER_TAG:\r\n        return { \"currency\": \"USD\", \"mode\": data.OHLEDGER_IMPARTER_TAG.mode, \"uri\": data.OHLEDGER_IMPARTER_TAG.remuneration_uri[data.OHLEDGER_IMPARTER_TAG.mode]};\r\n      case ETH_WEB3_IMPARTER_TAG:\r\n        return { \"name\": data.ETH_WEB3_IMPARTER_TAG.network, \"uri\": data.ETH_WEB3_IMPARTER_TAG.remuneration_uri[data.ETH_WEB3_IMPARTER_TAG.network]};\r\n      default:\r\n        throw new Error(\"invalid imparterTag\");\r\n    }\r\n  }\r\n\r\n  function getOverhideRemunerationAPIUri(imparterTag) {\r\n    switch (imparterTag) {\r\n      case OHLEDGER_IMPARTER_TAG:        \r\n        if (!data.OHLEDGER_IMPARTER_TAG.mode) throw new Error(\"network 'mode' must be set, use setNetwork\");\r\n        return data.OHLEDGER_IMPARTER_TAG.remuneration_uri[data.OHLEDGER_IMPARTER_TAG.mode];\r\n      case OHLEDGER_WEB3_IMPARTER_TAG:\r\n        if (!data.OHLEDGER_WEB3_IMPARTER_TAG.mode) throw new Error(\"network 'mode' must be set, use setNetwork\");\r\n        return data.OHLEDGER_WEB3_IMPARTER_TAG.remuneration_uri[data.OHLEDGER_WEB3_IMPARTER_TAG.mode];\r\n      case ETH_WEB3_IMPARTER_TAG:\r\n        return data.ETH_WEB3_IMPARTER_TAG.remuneration_uri[data.ETH_WEB3_IMPARTER_TAG.network];      \r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  async function getTally(imparterTag, recipient, date) {\r\n    return (await getTxs(imparterTag, recipient, date, true)).tally;\r\n  }\r\n\r\n  async function getTransactions(imparterTag, recipient, date) {\r\n    return (await getTxs(imparterTag, recipient, date, false)).transactions;\r\n  }\r\n\r\n  async function getTxs(imparterTag, recipient, date, tallyOnly) {\r\n    if (date && !(date instanceof Date)) throw new Error(\"'date' must be a Date is passed in\");\r\n    if (!('address' in recipient) || !recipient.address) throw new Error(\"'address' required in recipient\");\r\n    let to = recipient.address;\r\n    let uri = getOverhideRemunerationAPIUri(imparterTag);\r\n    switch (imparterTag) {\r\n      case OHLEDGER_IMPARTER_TAG:\r\n        if (!data.OHLEDGER_IMPARTER_TAG.mode) throw new Error(\"network 'mode' must be set, use setNetwork\");\r\n        if (!data.OHLEDGER_IMPARTER_TAG.address) throw new Error(\"from 'address' not set: use setCredentials\");\r\n        var from = data.OHLEDGER_IMPARTER_TAG.address;\r\n        break;\r\n      case OHLEDGER_WEB3_IMPARTER_TAG:\r\n        if (!data.OHLEDGER_WEB3_IMPARTER_TAG.mode) throw new Error(\"network 'mode' must be set, use setNetwork\");\r\n        if (!data.OHLEDGER_WEB3_IMPARTER_TAG.walletAddress) throw new Error(\"from 'walletAddress' not set: use wallet\");\r\n        var from = data.OHLEDGER_WEB3_IMPARTER_TAG.walletAddress;\r\n        break;\r\n      case ETH_WEB3_IMPARTER_TAG:\r\n        if (!data.ETH_WEB3_IMPARTER_TAG.network) throw new Error(\"no network for imparter tag\");\r\n        if (!data.ETH_WEB3_IMPARTER_TAG.walletAddress) throw new Error(\"from 'walletAddress' not set: use wallet\");\r\n        var from = data.ETH_WEB3_IMPARTER_TAG.walletAddress;\r\n        break;\r\n      default:\r\n        throw new Error('unsupported imparter tag');\r\n    }\r\n    if (!uri) throw new Error('no uri for request, unsupported network selected in wallet?');\r\n    let since = '';\r\n    if (date) {\r\n      since = `&since=${date.toISOString()}`;\r\n    }\r\n    return await fetch(`${uri}/get-transactions/${from}/${to}?tally-only=${tallyOnly ? 'true' : 'false'}${since}`)\r\n      .then(res => res.json())\r\n      .catch(e => {\r\n        throw String(e)\r\n      });\r\n  }\r\n\r\n  // raise oh$-event\r\n  // @param {string} imparterTag\r\n  // @param {string} triggerFor \r\n  // @param {Object} data - to stringify and sent as event.details.\r\n  function raiseEventClick(imparterTag, triggerFor) {\r\n    window.parent.document.dispatchEvent(new CustomEvent('oh$-event', {detail: JSON.stringify({\r\n      imparterTag: imparterTag,\r\n      triggerFor: triggerFor,\r\n      click: true\r\n    })}));\r\n  }\r\n\r\n  // raise oh$-event\r\n  // @param {string} imparterTag\r\n  // @param {string} triggerFor \r\n  // @param {Object} data - to stringify and sent as event.details.\r\n  function raiseEvent(imparterTag, triggerFor, data) {\r\n    window.parent.document.dispatchEvent(new CustomEvent('oh$-event', {detail: JSON.stringify({\r\n      ...data,\r\n      imparterTag: imparterTag,\r\n      triggerFor: triggerFor\r\n    })}));    \r\n  }\r\n\r\n  async function isOnLedger(imparterTag) {\r\n    let uri = getOverhideRemunerationAPIUri(imparterTag);\r\n    switch (imparterTag) {\r\n      case OHLEDGER_IMPARTER_TAG:\r\n        if (!data.OHLEDGER_IMPARTER_TAG.mode) throw new Error(\"network 'mode' must be set, use setNetwork\");\r\n        if (!data.OHLEDGER_IMPARTER_TAG.address) throw new Error(\"from 'address' not set: use setCredentials\");\r\n        var from = data.OHLEDGER_IMPARTER_TAG.address;\r\n        break;\r\n      case OHLEDGER_WEB3_IMPARTER_TAG:\r\n        if (!data.OHLEDGER_WEB3_IMPARTER_TAG.mode) throw new Error(\"network 'mode' must be set, use setNetwork\");\r\n        if (!data.OHLEDGER_WEB3_IMPARTER_TAG.walletAddress) throw new Error(\"from 'walletAddress' not set: use wallet\");\r\n        var from = data.OHLEDGER_WEB3_IMPARTER_TAG.walletAddress;\r\n        break;\r\n      case ETH_WEB3_IMPARTER_TAG:\r\n        if (!data.ETH_WEB3_IMPARTER_TAG.network) throw new Error(\"no network for imparter tag\");\r\n        if (!data.ETH_WEB3_IMPARTER_TAG.walletAddress) throw new Error(\"from 'walletAddress' not set: use wallet\");\r\n        var from = data.ETH_WEB3_IMPARTER_TAG.walletAddress;\r\n        break;\r\n      default:\r\n        throw new Error('unsupported imparter tag');\r\n    }\r\n    if (!uri) throw new Error('no uri for request, unsupported network selected in wallet?');\r\n    let message = 'verify ownership of address by signing';\r\n    let signature = await sign(imparterTag, message);\r\n    return await fetch(`${uri}/is-signature-valid`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\r\n      body: JSON.stringify({\r\n        signature: btoa(signature),\r\n        message: btoa(message),\r\n        address: from\r\n      })\r\n    })\r\n      .then((result) => {\r\n        if (result.status == 200) {\r\n          return true;\r\n        } else {\r\n          return false;\r\n        }\r\n      })\r\n      .catch(e => {\r\n        throw String(e)\r\n      });\r\n  }\r\n\r\n  async function sign(imparterTag, message) {\r\n    switch (imparterTag) {\r\n      case OHLEDGER_IMPARTER_TAG:\r\n        if (!data.OHLEDGER_IMPARTER_TAG.secret) throw new Error(`credentials for imparter ${OHLEDGER_IMPARTER_TAG} not set`);\r\n        return eth_accounts.sign(message, data.OHLEDGER_IMPARTER_TAG.secret).signature;\r\n      case OHLEDGER_WEB3_IMPARTER_TAG:\r\n        if (!data.OHLEDGER_WEB3_IMPARTER_TAG.walletAddress) throw new Error(`imparter ${OHLEDGER_WEB3_IMPARTER_TAG} not active`);\r\n        fire('onWalletPopup', {imparterTag: OHLEDGER_WEB3_IMPARTER_TAG});\r\n        return (await window.web3.eth.personal.sign(message, data.OHLEDGER_WEB3_IMPARTER_TAG.walletAddress, ''));\r\n      case ETH_WEB3_IMPARTER_TAG:\r\n        if (!data.ETH_WEB3_IMPARTER_TAG.walletAddress) throw new Error(`imparter ${ETH_WEB3_IMPARTER_TAG} not active`);\r\n        fire('onWalletPopup', {imparterTag: ETH_WEB3_IMPARTER_TAG});\r\n        return (await window.web3.eth.personal.sign(message, data.ETH_WEB3_IMPARTER_TAG.walletAddress, ''));\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  async function createTransaction(imparterTag, amount, to, options) {\r\n    switch (imparterTag) {\r\n      case OHLEDGER_IMPARTER_TAG:\r\n        if (!data.OHLEDGER_IMPARTER_TAG.mode) throw new Error(\"network 'mode' must be set, use setNetwork\");\r\n        if (!data.OHLEDGER_IMPARTER_TAG.address) throw new Error(\"from 'address' not set: use setCredentials\");\r\n        var from = data.OHLEDGER_IMPARTER_TAG.address;\r\n        break;\r\n      case OHLEDGER_WEB3_IMPARTER_TAG:\r\n        if (!data.OHLEDGER_WEB3_IMPARTER_TAG.mode) throw new Error(\"network 'mode' must be set, use setNetwork\");\r\n        if (!data.OHLEDGER_WEB3_IMPARTER_TAG.walletAddress) throw new Error(\"from 'walletAddress' not set: use wallet\");\r\n        var from = data.OHLEDGER_WEB3_IMPARTER_TAG.walletAddress;\r\n        break;\r\n      case ETH_WEB3_IMPARTER_TAG:\r\n        if (!data.ETH_WEB3_IMPARTER_TAG.network) throw new Error(\"no network for imparter tag\");\r\n        if (!data.ETH_WEB3_IMPARTER_TAG.walletAddress) throw new Error(\"from 'walletAddress' not set: use wallet\");\r\n        var from = data.ETH_WEB3_IMPARTER_TAG.walletAddress;\r\n        break;\r\n      default:\r\n        throw new Error('unsupported imparter tag');\r\n    }\r\n    switch (imparterTag) {\r\n      case OHLEDGER_IMPARTER_TAG:\r\n      case OHLEDGER_WEB3_IMPARTER_TAG:\r\n        if (amount == 0) {\r\n          if ('message' in options && options.message && 'signature' in options && options.signature) {\r\n            var message = options.message;\r\n            var signature = options.signature;\r\n          } else {\r\n            var message = `verify ownership of address by signing on ${new Date().toLocaleString()}`;\r\n            var signature = await sign(imparterTag, message);\r\n          }\r\n          await showOhLedgerGratisIframeUri(imparterTag, from, signature, message);\r\n        } else {\r\n          let eventPromise = setupNewPromise();\r\n          data.OHLEDGER_IMPARTER_TAG.oh_ledger_transact_fn[data.OHLEDGER_IMPARTER_TAG.mode](amount, from, to);\r\n          await eventPromise;\r\n        }\r\n        break;\r\n      case ETH_WEB3_IMPARTER_TAG:\r\n        fire('onWalletPopup', {imparterTag: ETH_WEB3_IMPARTER_TAG});\r\n        await (new Promise((resolve, reject) => {\r\n          web3.eth.sendTransaction({ from: from, to: to, value: amount })\r\n          .on('confirmation', function (confirmationNumber, receipt) {\r\n            resolve();\r\n          })\r\n          .on('error', (error) => {\r\n            reject(error);\r\n          }); \r\n        }));\r\n        break;\r\n      default:\r\n        throw new Error('unsupported imparter tag');\r\n    }\r\n    return true;\r\n  }\r\n\r\n  var resolve = null;\r\n  var reject = null;\r\n\r\n  // promise used for popups and resolutions via oh-ledger-* messages.\r\n  function setupNewPromise() {\r\n    console.assert(!resolve, 'oh-popup promise being set but already set when calling setupNewPromise(..)');\r\n    return new Promise((rs, rj) => {\r\n      resolve = rs;\r\n      reject = rj;\r\n    });    \r\n  }\r\n\r\n  // make popup visible to be hidden with makePopupHidden\r\n  function makePopupVisible() {\r\n    var popup = document.getElementById('oh-popup-container');\r\n    popup.style.display='block';\r\n    return setupNewPromise();\r\n  }\r\n\r\n  function makePopupHidden(params, isError) {\r\n    var popup = document.getElementById('oh-popup-container');\r\n    hideAllPopupContents();\r\n    popup.style.display='none';\r\n    console.assert(resolve, 'oh-popup promise not set yet calling makePopupHidden(..)');\r\n    if (isError) reject(params)\r\n    else resolve(params);\r\n    resolve = null;\r\n    reject = null;\r\n  }\r\n\r\n  window.addEventListener('message', (e) => {\r\n    if (e.data && e.data.event === 'oh-ledger-ok') {\r\n      makePopupHidden(e.data.detail);\r\n    } else if (e.data && e.data.event === 'oh-ledger-error') {\r\n      makePopupHidden(e.data.detail, true);\r\n    }\r\n  }, false);\r\n\r\n  function hideAllPopupContents() {\r\n    document.getElementById('oh-ledger-gratis-iframe').style.display='none';\r\n  }\r\n\r\n  async function showOhLedgerGratisIframeUri(imparterTag, from, signature, message) {\r\n    hideAllPopupContents();\r\n    let uri = getOverhideRemunerationAPIUri(imparterTag);\r\n    var frame = document.getElementById('oh-ledger-gratis-iframe');\r\n    frame.setAttribute('src', `${uri}/gratis.html?address=${from}&signature=${signature}&message=${message}`);\r\n    frame.style.display='block';    \r\n    await makePopupVisible();\r\n  }\r\n\r\n  function createPopup() {\r\n    var popup = document.createElement('div');\r\n    popup.setAttribute('id','oh-popup-container');\r\n    popup.style.display='none';\r\n    popup.innerHTML = `\r\n      <div>\r\n        <a href=\"#\" title=\"Close\" id=\"oh-popup-close\" onclick=\"window.parent.document.dispatchEvent(new CustomEvent('oh$-popup-close',{})); return false;\">X</a>\r\n        <iframe id=\"oh-ledger-gratis-iframe\"></iframe>\r\n      </div>\r\n    `;\r\n    var style = document.createElement('style');\r\n    style.innerHTML =`\r\n      #oh-popup-container {\r\n          position: fixed;\r\n          font-family: arial, \"lucida console\", sans-serif;\r\n          top: 0;\r\n          right: 0;\r\n          bottom: 0;\r\n          left: 0;\r\n          background: rgba(0, 0, 0, 0.8);\r\n          z-index: 999;\r\n          opacity:1;\r\n          pointer-events: auto;\r\n      }\r\n      #oh-popup-container > div {\r\n          width: 80vw;\r\n          height: 75vh;\r\n          position: relative;\r\n          top: 15vh;\r\n          margin: auto auto;\r\n          padding: 5px 5px 5px 5px;\r\n          background: white;\r\n      }\r\n      #oh-popup-close {\r\n          background: grey;\r\n          color: white;\r\n          line-height: 25px;\r\n          position: absolute;\r\n          right: 2px;\r\n          text-align: center;\r\n          top: 2px;\r\n          width: 24px;\r\n          text-decoration: none;\r\n          font-weight: bold;\r\n      }\r\n      #oh-popup-close:hover {\r\n          background: black;\r\n      }\r\n\r\n      #oh-ledger-gratis-iframe {\r\n        display: none;\r\n        border: 0;\r\n        overflow: hidden;\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n    `;\r\n    var attach = () => {\r\n      if (document.body) {\r\n        document.body.appendChild(popup);\r\n        document.body.appendChild(style);\r\n        loadOhLedgerTransactFns();\r\n      } else {\r\n        setTimeout(attach, 100);\r\n      };\r\n    };\r\n    attach();\r\n  }\r\n\r\n  window.document.addEventListener('oh$-popup-close', (e) => {\r\n    makePopupHidden('user close', true);\r\n  });\r\n\r\n  // https://stackoverflow.com/a/31374433\r\n  function loadJS(url, implementationCode, location) {\r\n    //url is URL of external file, implementationCode is the code\r\n    //to be called from the file, location is the location to \r\n    //insert the <script> element\r\n\r\n    var scriptTag = document.createElement('script');\r\n    scriptTag.src = url;\r\n\r\n    scriptTag.onload = implementationCode;\r\n    scriptTag.onreadystatechange = implementationCode;\r\n\r\n    location.appendChild(scriptTag);\r\n  };\r\n\r\n  function loadOhLedgerTransactFns() {\r\n    // load prod ohledger transact fn\r\n    loadJS(`${data.OHLEDGER_IMPARTER_TAG.remuneration_uri.prod}/transact.js`, () => {\r\n      data.OHLEDGER_IMPARTER_TAG.oh_ledger_transact_fn.prod = oh_ledger_transact;\r\n      data.OHLEDGER_WEB3_IMPARTER_TAG.oh_ledger_transact_fn.prod = oh_ledger_transact;\r\n    }, document.body);\r\n\r\n    // load test ohledger transact fn\r\n    loadJS(`${data.OHLEDGER_IMPARTER_TAG.remuneration_uri.test}/transact.js`, () => {\r\n      data.OHLEDGER_IMPARTER_TAG.oh_ledger_transact_fn.test = oh_ledger_transact;\r\n      data.OHLEDGER_WEB3_IMPARTER_TAG.oh_ledger_transact_fn.test = oh_ledger_transact;\r\n    }, document.body);\r\n  }\r\n\r\n  return root.oh$;\r\n})();\r\n\r\nexport default oh$;","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"],"sourceRoot":""}